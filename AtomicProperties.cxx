#include "AtomicProperties.h"
#include "Utility.h"

#include <iostream>
#include <map>
using std::map;
using std::string;
using std::cerr;
using std::endl;

namespace AtomicProperties
{

// ---------------------------------------------------------------------------
double Radius(string &sym, int mode)
{
  return Radius(Number(sym), mode);
}

// ---------------------------------------------------------------------------
double Radius(unsigned short number, int mode)
{
  // per element radius data
  // atomic ionic covalent vanderwals crystal
  // -1.0 is used where no data is available
  // http://crystalmaker.com/support/tutorials/crystalmaker/atomic-radii/index.html
  static double radius[] = {
    0.53, 0.25, 0.37, 1.20, 0.10,
    0.31, 0.31, 0.32, 1.40, -1.0,
    1.67, 1.45, 1.34, 1.82, 0.90,
    1.12, 1.05, 0.90, -1.0, 0.41,
    0.87, 0.85, 0.82, -1.0, 0.25,
    0.67, 0.70, 0.77, 1.70, 0.29,
    0.56, 0.65, 0.75, 1.55, 0.30,
    0.48, 0.60, 0.73, 1.52, 1.21,
    0.42, 0.50, 0.71, 1.47, 1.19,
    0.38, 0.38, 0.69, 1.54, -1.0,
    1.90, 1.80, 1.54, 2.27, 1.16,
    1.45, 1.50, 1.30, 1.73, 0.86,
    1.18, 1.25, 1.18, -1.0, 0.53,
    1.11, 1.10, 1.11, 2.10, 0.40,
    0.98, 1.00, 1.06, 1.80, 0.31,
    0.88, 1.00, 1.02, 1.80, 0.43,
    0.79, 1.00, 0.99, 1.75, 1.67,
    0.71, 0.71, 0.97, 1.88, -1.0,
    2.43, 2.20, 1.96, 2.75, 1.52,
    1.94, 1.80, 1.74, -1.0, 1.14,
    1.84, 1.60, 1.44, -1.0, 0.89,
    1.76, 1.40, 1.36, -1.0, 0.75,
    1.71, 1.35, 1.25, -1.0, 0.68,
    1.66, 1.40, 1.27, -1.0, 0.76,
    1.61, 1.40, 1.39, -1.0, 0.81,
    1.56, 1.40, 1.25, -1.0, 0.69,
    1.52, 1.35, 1.26, -1.0, 0.54,
    1.49, 1.35, 1.21, 1.63, 0.70,
    1.45, 1.35, 1.38, 1.40, 0.71,
    1.42, 1.35, 1.31, 1.39, 0.74,
    1.36, 1.30, 1.26, 1.87, 0.76,
    1.25, 1.25, 1.22, -1.0, 0.53,
    1.14, 1.15, 1.19, 1.85, 0.72,
    1.03, 1.15, 1.16, 1.90, 0.56,
    0.94, 1.15, 1.14, 1.85, 1.82,
    0.88, 0.88, 1.10, 2.02, -1.0,
    2.65, 2.35, 2.11, -1.0, 1.66,
    2.19, 2.00, 1.92, -1.0, 1.32,
    2.12, 1.85, 1.62, -1.0, 1.04,
    2.06, 1.55, 1.48, -1.0, 0.86,
    1.98, 1.45, 1.37, -1.0, 0.78,
    1.90, 1.45, 1.45, -1.0, 0.79,
    1.83, 1.35, 1.56, -1.0, 0.79,
    1.78, 1.30, 1.26, -1.0, 0.82,
    1.73, 1.35, 1.35, -1.0, 0.81,
    1.69, 1.40, 1.31, 1.63, 0.78,
    1.65, 1.60, 1.53, 1.72, 1.29,
    1.61, 1.55, 1.48, 1.58, 0.92,
    1.56, 1.55, 1.44, 1.93, 0.94,
    1.45, 1.45, 1.41, 2.17, 0.69,
    1.33, 1.45, 1.38, -1.0, 0.90,
    1.23, 1.40, 1.35, 2.06, 1.11,
    1.15, 1.40, 1.33, 1.98, 2.06,
    1.08, 1.08, 1.30, 2.16, 0.62,
    2.98, 2.60, 2.25, -1.0, 1.81,
    2.53, 2.15, 1.98, -1.0, 1.49,
    1.95, 1.95, 1.69, -1.0, 1.36,
    1.85, 1.85, -1.0, -1.0, 1.15,
    2.47, 1.85, -1.0, -1.0, 1.32,
    2.06, 1.85, -1.0, -1.0, 1.30,
    2.05, 1.85, -1.0, -1.0, 1.28,
    2.38, 1.85, -1.0, -1.0, 1.10,
    2.31, 1.85, -1.0, -1.0, 1.31,
    2.33, 1.80, -1.0, -1.0, 1.08,
    2.25, 1.75, -1.0, -1.0, 1.18,
    2.28, 1.75, -1.0, -1.0, 1.05,
    2.26, 1.75, -1.0, -1.0, 1.04,
    2.26, 1.75, -1.0, -1.0, 1.03,
    2.22, 1.75, -1.0, -1.0, 1.02,
    2.22, 1.75, -1.0, -1.0, 1.13,
    2.17, 1.75, 1.60, -1.0, 1.00,
    2.08, 1.55, 1.50, -1.0, 0.85,
    2.00, 1.45, 1.38, -1.0, 0.78,
    1.93, 1.35, 1.46, -1.0, 0.74,
    1.88, 1.35, 1.59, -1.0, 0.77,
    1.85, 1.30, 1.28, -1.0, 0.77,
    1.80, 1.35, 1.37, -1.0, 0.77,
    1.77, 1.35, 1.28, 1.75, 0.74,
    1.74, 1.35, 1.44, 1.66, 1.51,
    1.71, 1.50, 1.49, 1.55, 0.83,
    1.56, 1.90, 1.48, 1.96, 1.03,
    1.54, 1.80, 1.47, 2.02, 1.49,
    1.43, 1.60, 1.46, -1.0, 1.17,
    1.35, 1.90, -1.0, -1.0, 1.08,
    1.27, 1.27, -1.0, -1.0, 0.76,
    1.20, 1.20, 1.45, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, 1.94,
    -1.0, 2.15, -1.0, -1.0, 1.62,
    1.95, 1.95, -1.0, -1.0, 1.26,
    1.80, 1.80, -1.0, -1.0, 1.19,
    1.80, 1.80, -1.0, -1.0, 1.09,
    1.75, 1.75, -1.0, 1.86, 0.87,
    1.75, 1.75, -1.0, -1.0, -1.0,
    1.75, 1.75, -1.0, -1.0, 1.00,
    1.75, 1.75, -1.0, -1.0, 1.12,
    -1.0, -1.0, -1.0, -1.0, 1.11
    };

  size_t col = 0;
  switch(mode)
    {
    case ATOMIC:
      col = 0;
      break;
    case IONIC:
      col = 1;
      break;
    case COVALENT:
      col = 2;
      break;
    case VANDERWAALS:
      col = 3;
      break;
    case CRYSTAL:
      col = 4;
      break;
    default:
      pError(cerr) << "Bad mode " << mode << endl;
      return -1.0;
    }

  if ((number < 1) || (number > 96))
    {
    pError(cerr) << "No data for " << number << endl;
    return -1.0;
    }

  size_t ii = (number-1)*5+col;
  double r = radius[ii];
  if (r < 0.0)
    {
    pError(cerr) << "No data for " << Symbol(number) << endl;
    return -1.0;
    }

  return r;
}

// ---------------------------------------------------------------------------
unsigned short Number(const string &sym)
{
  static map<string,int> number;
  static bool init = false;
  if (!init)
    {
    init = true;
    for (unsigned short i=1; i<=96; ++i)
      {
      number[Symbol(i)] = i;
      }
    }
  if (!number.count(sym))
    {
    pError(cerr) << "Bad atom symbol " << sym << endl;
    return 0;
    }
  return number[sym];
}

// ---------------------------------------------------------------------------
string Symbol(unsigned short number)
{
  static const char *symbol[] = {
    "H", "He", "Li", "Be", "B", "C",
    "N", "O", "F", "Ne", "Na", "Mg",
    "Al", "Si", "P", "S", "Cl", "Ar",
    "K", "Ca", "Sc", "Ti", "V", "Cr",
    "Mn", "Fe", "Co", "Ni", "Cu", "Zn",
    "Ga", "Ge", "As", "Se", "Br", "Kr",
    "Rb", "Sr", "Y", "Zr", "Nb", "Mo",
    "Tc", "Ru", "Rh", "Pd", "Ag", "Cd",
    "In", "Sn", "Sb", "Te", "I", "Xe",
    "Cs", "Ba", "La", "Ce", "Pr", "Nd",
    "Pm", "Sm", "Eu", "Gd", "Tb", "Dy",
    "Ho", "Er", "Tm", "Yb", "Lu", "Hf",
    "Ta", "W", "Re", "Os", "Ir", "Pt",
    "Au", "Hg", "Tl", "Pb", "Bi", "Po",
    "At", "Rn", "Fr", "Ra", "Ac", "Th",
    "Pa", "U", "Np", "Pu", "Am", "Cm",
    };
  if ((number < 1) || (number > 96))
    {
    pError(cerr) << "No data for atomic number " << number << endl;
    return "";
    }
  return symbol[number-1];
}

};
